/* Copyright Yi Wang <yi.wang.2005@gmail.com>. All Rights Reserved.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License. */

syntax = "proto2";

package fluid;

// Type describe the type of variables and function parameters.
message Type {
  enum FirstClass {
    UINT8 = 0;
    UINT16 = 1;
    UINT32 = 2;
    UINT64 = 3;
    INT8 = 4;
    INT16 = 5;
    INT32 = 6;
    INT64 = 7;
    FLOAT16 = 8;
    FLOAT32 = 9;
    FLOAT64 = 10;
    STRING = 11;
    BOOL = 12;
    BLOCK = 13;
  }
  message Tensor {
    repeated Type elem_type = 1; // [float16, float32] means float16 or float32.
    repeated int64 dims = 2;     // [UNK, 640, 480] is saved as [-1, 640, 480]
  }
  message LoDTensor {
    required Tensor tensor = 1;
    optional int32 lod_level = 2 [ default = 0 ];
  }

  optional FirstClass first_class = 1;
  optional Tensor tensor = 2;
  optional LoDTensor lod_tensor = 3;
}

// FunctionSignature is the signature of a user-defined or bulit-in
// function.  Fluid aims to implement non-experimental operators
// defined in ONNX as built-in functions.
//
// TODO(yi): Currently, we don't support namespace.  The Fluid
// compiler searches for the definition of a function by its name in
// Program.functions.  If it finds the definition, it can call it;
// otherwise, this function should be a built-in one.
message FunctionSignature {
  message Parameter {
    optional string name = 1; // Parameters do not have to be named.
    required Type type = 2;
  }
  required string name = 1;
  repeated Parameter inputs = 2;
  repeated Parameter outputs = 3;
}

// FunctionDefinition describes a user-defined function.  For built-in
// functions, the body is implemented in C/C++, instead of a block.
message FunctionDefinition {
  required FunctionSignature signature = 1;
  required int32 body = 2; // indexes to Program.blocks.
}

// A Block is the basic lexical structure in programming languages.
// In C/C++/Java/etc, a block is a pair of curly braces that appears
// in control-flows (if-else, for, while) or function definitions.  In
// each block, there could be some local variable definitions and a
// sequence of statements, each is usually a function invocation.
message Block {
  message Variable {
    required string name = 1;
    required Type type = 2;
  }
  message FunctionInvocation {
    required string name = 1;
    repeated string inputs = 2;  // Variable names
    repeated string outputs = 3; // Variable names
  }

  required int32 parent = 1; // indexes in Program.blocks.
  repeated Variable vars = 2;
  repeated FunctionInvocation calls = 3;
}

// A Program has a lexical structure and a procedure structure.
//
// The lexical structure is a tree/hierarchy of Blocks.  Consider a C
// program, the only one root block contains some function
// definitions, including the main function, and the global variable
// definitions.  Each function's body is a block, which might contain
// control-flows like if-then and for, where each control-flow usually
// has one or more blocks, e.g., the left and right branch of if-then
// and the step of a loop.
//
// The procedure structure defines the sequence of (user-defined and
// built-in) functions.  Each function call might involve one or more
// variables as either inputs or outputs.  These variables are
// referred by their names.  It is possible that a referred variables
// is not defined in the block where the function invocation happends.
// In this case, Fluid compiler searches for the variable with the
// given name in an ancestor block.
message Program {
  // The flattened block-hierarchy in the program, where blocks[0] is
  // the out-most block.
  repeated Block blocks = 1;
  // Function definitions in the program.
  repeated FunctionDefinition functions = 2;
}